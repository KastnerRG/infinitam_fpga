apply plugin: 'com.android.application'

android {
//    compileSdkVersion 19
//    buildToolsVersion "23.0.1"
//
//    defaultConfig {
//        applicationId "uk.ac.ox.robots.InfiniTAM"
//        minSdkVersion 19
//        targetSdkVersion 19
//
////        ndk {
////            moduleName "libcudart_static"
////        }
//    }
//
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
//        }
//    }
    signingConfigs {
        config {
            keyAlias 'tangokey'
            keyPassword 'tangokey'
            storeFile file('../../../key.jks')
            storePassword 'tangokey'
        }
    }
    compileSdkVersion 19
    buildToolsVersion "21.1.2"
    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = []
    }
    defaultConfig {
        applicationId "com.qgautier.InfiniTAM"
        minSdkVersion 19
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    productFlavors {
        MainFlavor {
            minSdkVersion 19
            applicationId 'com.qgautier.InfiniTAM'
            targetSdkVersion 19
            versionCode 1
            versionName '1.0'
            resValue "string", "app_name", "InfiniTAM"
        }
        NoColorsFlavor {
            minSdkVersion 19
            applicationId 'com.qgautier.InfiniTAMNoColors'
            targetSdkVersion 19
            versionCode 2
            versionName '1.0'
            resValue "string", "app_name", "InfiniTAMNoColors"
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}


tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

task ndkBuild(type: Exec, dependsOn: ['itmLibBuild']) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkbuild = properties.getProperty('ndk.dir', null)+"/ndk-build"
    commandLine ndkbuild,
            '-C', file('src/main/jni').absolutePath,
            '-j', Runtime.runtime.availableProcessors(),
            'V=1',
            'all',
            'NDK_DEBUG=0'
}


task itmLibBuild(type: Exec) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    //def gcc = properties.getProperty('ndk.dir', null)+"/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-g++"
    def gcc = properties.getProperty('ndk.dir', null)+"/toolchains/arm-linux-androideabi-4.6/gen_standalone/linux-x86_64/bin/arm-linux-androideabi-g++"
    def nvcc = "$System.env.CUDA_TOOLKIT_ROOT/bin/nvcc"
    def nvcc_flags = "-target-cpu-arch ARM " +
                      "-ccbin $gcc " +
                      //"--compiler-options \'-fPIC\' " +
                      "-arch=sm_32 " +
                      "-m32 " +
                      "-O3 " +
                      //"-c " +
                      "-Xptxas \'-dlcm=ca\' -target-os-variant=Android --use_fast_math "

    def itmlib_path = file('../../ITMLib').absolutePath

    def target = "libITMLib.a"

    environment "TANGO_FLAGS", "-DCOMPILE_FOR_TANGO -DNO_DETAILED_PROFILING"

    args = ["-f",
            itmlib_path + "/Android.mk",
            '-j', Runtime.runtime.availableProcessors(),
            "GCC=$gcc",
            "NVCC=$nvcc $nvcc_flags",
            "ITMLIB_PATH=$itmlib_path",
            "$target"]

    executable="make"
}




dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
}


